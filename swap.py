{
  "chainId": 688688,
  "data": "0x5ae401dc0000000000000000000000000000000000000000000000000000000068270,afe0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf00000000000000000000000076aaada469d23216be5f7c596fa25f282ff9b364,000000000000000000000000ad902cf99c2de2f1ba5ec4d642fd7e49cae9ee3700000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000b55056a2bcee645b6c6375caa75b7161f4170f5300000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000091,c29abc85bf14000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "from": "0xb55056a2bcee645b6c6375caa75b7161f4170f53",
  "gas": "0x2ec31",
  "gasPrice": "0x47868c00",
  "nonce": "0x59",
  "to": "0x1A4DE519154Ae51200b0Ad7c90F7faC75547888a",
  "value": "0x38d7ea4c68000"
}

{
  "chainId": 688688,
  "data": "0x5ae401dc0000000000000000000000000000000000000000000000000000000068270,b180000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf00000000000000000000000076aaada469d23216be5f7c596fa25f282ff9b364,000000000000000000000000ad902cf99c2de2f1ba5ec4d642fd7e49cae9ee3700000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000b55056a2bcee645b6c6375caa75b7161f4170f5300000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000091,b8133b86d91f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "from": "0xb55056a2bcee645b6c6375caa75b7161f4170f53",
  "gas": "0x2ec31",
  "gasPrice": "0x47868c00",
  "nonce": "0x5a",
  "to": "0x1A4DE519154Ae51200b0Ad7c90F7faC75547888a",
  "value": "0x38d7ea4c68000"
}

from eth_abi.abi import encode as encode_abi
from eth_utils import keccak, to_bytes, to_hex, pad_right

# === Step 1: Siapkan function selector multicall ===
# function multicall(uint256, bytes[]) => selector = keccak("multicall(uint256,bytes[])")[:4]
function_selector = keccak(text="multicall(uint256,bytes[])")[:4]  # b'\x5a\xe4\x01\xdc'

# === Step 2: Siapkan argumen ===

# Argument 1: collectionAndSelfcalls (uint256)
collection_and_selfcalls = 0

# Argument 2: data[] = array of bytes
# Misal: kita punya encoded exactInputSingle sebagai berikut (harus hasil encode dari sebelumnya)
# Example payload (228 bytes = 0xe4) from swap like exactInputSingle
data_0 = bytes.fromhex(
    "04e45aaf" +
    "00000000000000000000000076aaada469d23216be5f7c596fa25f282ff9b364" +
    "000000000000000000000000ad902cf99c2de2f1ba5ec4d642fd7e49cae9ee37" +
    "00000000000000000000000000000000000000000000000000000000000001f4" +  # fee = 500
    "000000000000000000000000b55056a2bcee645b6c6375caa75b7161f4170f53" +  # recipient
    "00000000000000000000000000000000000000000000000000038d7ea4c68000" +  # amountIn = 0.0001
    "0000000000000000000000000000000000000000000000000000000000000000" +  # amountOutMinimum
    "0000000000000000000000000000000000000000000000000000000000000000"    # sqrtPriceLimitX96
)

# === Step 3: Encode parameter `data[]` ===
# Encode as `bytes[]` â†’ must be dynamic array of bytes
data_encoded = encode_abi(['bytes[]'], [[data_0]])

# === Step 4: Gabungkan semua jadi calldata ===
calldata = (
    function_selector +
    encode_abi(['uint256'], [collection_and_selfcalls]) +
    encode_abi(['bytes'], [data_encoded])  # offset & bytes[] encoding
)

# === Step 5: Print final calldata ===
print("Calldata (hex):", to_hex(calldata))
